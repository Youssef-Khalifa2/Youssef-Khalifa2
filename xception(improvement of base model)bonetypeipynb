{"cells":[{"source":"<a href=\"https://www.kaggle.com/code/youssefkhalifa24/bone-type-model-for-mura?scriptVersionId=182462792\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","execution_count":1,"id":"d6f3ec9d","metadata":{"execution":{"iopub.execute_input":"2024-06-09T22:39:08.214554Z","iopub.status.busy":"2024-06-09T22:39:08.214151Z","iopub.status.idle":"2024-06-09T22:39:21.116921Z","shell.execute_reply":"2024-06-09T22:39:21.115999Z"},"papermill":{"duration":12.911737,"end_time":"2024-06-09T22:39:21.11916","exception":false,"start_time":"2024-06-09T22:39:08.207423","status":"completed"},"tags":[]},"outputs":[{"name":"stderr","output_type":"stream","text":["2024-06-09 22:39:10.078206: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:9261] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n","2024-06-09 22:39:10.078301: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:607] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n","2024-06-09 22:39:10.201345: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1515] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n","/tmp/ipykernel_25/3400929819.py:19: DeprecationWarning: `import kerastuner` is deprecated, please use `import keras_tuner`.\n","  from kerastuner.tuners import RandomSearch\n"]}],"source":["import os\n","import cv2\n","import keras\n","import shutil\n","import random\n","import gc\n","import numpy as np\n","import pandas as pd \n","import tensorflow as tf\n","from PIL import Image, UnidentifiedImageError\n","from tensorflow.keras.preprocessing.image import load_img, img_to_array\n","from tensorflow.keras.layers import Input, Average, Dense ,Layer\n","from tensorflow.keras.layers import Dropout, GlobalAveragePooling2D, BatchNormalization,MaxPooling2D\n","from tensorflow.keras.regularizers import l2\n","from tensorflow.keras.layers import Concatenate, GlobalAveragePooling2D\n","from sklearn.model_selection import train_test_split\n","from keras.callbacks import EarlyStopping, ModelCheckpoint, LearningRateScheduler, TensorBoard\n","from keras.layers import Concatenate\n","from kerastuner.tuners import RandomSearch\n","from keras.models import load_model\n","from tensorflow.keras.applications import Xception,EfficientNetB0\n","from tensorflow.keras.utils import Sequence\n","from tensorflow.keras import mixed_precision , applications,layers\n","from keras.applications.resnet50 import preprocess_input\n","mixed_precision.set_global_policy('mixed_float16')"]},{"cell_type":"code","execution_count":2,"id":"67dde5c9","metadata":{"execution":{"iopub.execute_input":"2024-06-09T22:39:21.13098Z","iopub.status.busy":"2024-06-09T22:39:21.130491Z","iopub.status.idle":"2024-06-09T22:39:21.134868Z","shell.execute_reply":"2024-06-09T22:39:21.134006Z"},"papermill":{"duration":0.012213,"end_time":"2024-06-09T22:39:21.136746","exception":false,"start_time":"2024-06-09T22:39:21.124533","status":"completed"},"tags":[]},"outputs":[],"source":["image_shape = (224, 224, 3)\n","num_classes = 5  \n","num_views = 7\n","batch_size = 32 "]},{"cell_type":"code","execution_count":3,"id":"5193ee0c","metadata":{"execution":{"iopub.execute_input":"2024-06-09T22:39:21.147693Z","iopub.status.busy":"2024-06-09T22:39:21.147424Z","iopub.status.idle":"2024-06-09T22:39:21.153926Z","shell.execute_reply":"2024-06-09T22:39:21.153107Z"},"papermill":{"duration":0.014074,"end_time":"2024-06-09T22:39:21.155837","exception":false,"start_time":"2024-06-09T22:39:21.141763","status":"completed"},"tags":[]},"outputs":[{"data":{"text/plain":["'# Source path of the model\\nsource_path = \"/kaggle/input/bone-type-midway-multi/keras/xception-trails/1/xceptionattentionregularizedno-hypertuning.keras\"\\n\\n# Destination path where you can write\\ndestination_path = \"/kaggle/working/model.keras\"\\n\\n# Copy the model file\\nshutil.copyfile(source_path, destination_path)\\n\\n# Now load the model from the copied file\\nmodel = load_model(destination_path)'"]},"execution_count":3,"metadata":{},"output_type":"execute_result"}],"source":["'''# Source path of the model\n","source_path = \"/kaggle/input/bone-type-midway-multi/keras/xception-trails/1/xceptionattentionregularizedno-hypertuning.keras\"\n","\n","# Destination path where you can write\n","destination_path = \"/kaggle/working/model.keras\"\n","\n","# Copy the model file\n","shutil.copyfile(source_path, destination_path)\n","\n","# Now load the model from the copied file\n","model = load_model(destination_path)'''"]},{"cell_type":"code","execution_count":4,"id":"2445a5fe","metadata":{"execution":{"iopub.execute_input":"2024-06-09T22:39:21.167246Z","iopub.status.busy":"2024-06-09T22:39:21.166987Z","iopub.status.idle":"2024-06-09T22:39:21.187535Z","shell.execute_reply":"2024-06-09T22:39:21.18687Z"},"papermill":{"duration":0.028426,"end_time":"2024-06-09T22:39:21.18925","exception":false,"start_time":"2024-06-09T22:39:21.160824","status":"completed"},"tags":[]},"outputs":[],"source":["class CustomDataGenerator(Sequence):\n","    def __init__(self, image_paths, labels, batch_size, image_shape, num_classes, num_views=num_views):\n","        super().__init__()\n","        self.image_paths = list(image_paths)\n","        self.labels = list(labels)\n","        self.batch_size = batch_size\n","        self.image_shape = image_shape\n","        self.num_classes = num_classes\n","        self.num_views = num_views\n","        self.on_epoch_end()\n","\n","    def __len__(self):\n","        return int(np.floor(len(self.image_paths) / self.batch_size))\n","\n","    def __getitem__(self, index):\n","        indices = self.indices[index * self.batch_size:(index + 1) * self.batch_size]\n","        batch_image_paths = [self.image_paths[i] for i in indices]\n","        batch_labels = [self.labels[i] for i in indices]\n","\n","        images = []\n","        for folder_path in batch_image_paths:\n","            images.append(self._load_and_pad_images(folder_path, self.image_shape))\n","\n","        images = np.array(images)  # Shape: (batch_size, num_views, height, width, channels)\n","        batch_labels = tf.keras.utils.to_categorical(batch_labels, num_classes=self.num_classes)\n","\n","        # Transpose the batch to separate views as different inputs\n","        images = [images[:, i, :, :, :] for i in range(self.num_views)]\n","        \n","        # Convert to tuple of tensors\n","        images = tuple(tf.convert_to_tensor(img) for img in images)\n","        batch_labels = tf.convert_to_tensor(batch_labels)\n","\n","        return images, batch_labels\n","\n","    def on_epoch_end(self):\n","        self.indices = np.arange(len(self.image_paths))\n","        np.random.shuffle(self.indices)\n","\n","    def _load_and_pad_images(self, folder_path, image_shape):\n","        image_paths = [os.path.join(folder_path, f) for f in os.listdir(folder_path)\n","                       if f.endswith((\".jpg\", \".jpeg\", \".png\")) and not f.startswith(\"._\")]\n","\n","        if not image_paths:\n","            logger.error(f\"No valid images found in folder: {folder_path}\")\n","            return [np.zeros((image_shape[0], image_shape[1], image_shape[2]))] * self.num_views\n","\n","        if len(image_paths) > self.num_views:\n","            image_paths = random.sample(image_paths, self.num_views)\n","\n","        processed_images = []\n","        for image_path in image_paths:\n","            try:\n","                img = load_img(image_path, target_size=image_shape)\n","                img_array = img_to_array(img)\n","                img_array = img_array / 255.0\n","                preprocessed_img_array = preprocess_input(img_array)\n","                processed_images.append(preprocessed_img_array)\n","            except Exception as e:\n","                logger.warning(f\"Warning: Skipping unidentifiable image file: {image_path} due to {e}\")\n","                processed_images.append(np.zeros((image_shape[0], image_shape[1], image_shape[2])))\n","\n","        while len(processed_images) < self.num_views:\n","            processed_images.append(np.zeros((image_shape[0], image_shape[1], image_shape[2])))\n","\n","        return np.array(processed_images)\n","\n","@tf.keras.utils.register_keras_serializable(package='Custom', name='AttentionLayer')\n","class AttentionLayer(Layer):\n","    def __init__(self, **kwargs):\n","        super(AttentionLayer, self).__init__(**kwargs)\n","        self.dense = None\n","        self.attention_weights = None\n","\n","    def build(self, input_shape):\n","        self.dense = Dense(input_shape[-1], activation='tanh')\n","        self.attention_weights = Dense(1)\n","        super(AttentionLayer, self).build(input_shape)\n","\n","    def call(self, inputs):\n","        dense_features = self.dense(inputs)\n","        raw_attention_scores = self.attention_weights(dense_features)\n","        attention_scores = tf.nn.softmax(raw_attention_scores, axis=1)\n","        context_vector = tf.reduce_sum(attention_scores * inputs, axis=1)\n","        return context_vector\n","        return context_vector\n","\n","@tf.keras.utils.register_keras_serializable(package='Custom', name='StackLayer')\n","class StackLayer(Layer):\n","    def __init__(self, axis, **kwargs):\n","        super(StackLayer, self).__init__(**kwargs)\n","        self.axis = axis\n","\n","    def call(self, inputs):\n","        return tf.stack(inputs, axis=self.axis)"]},{"cell_type":"markdown","id":"778c2c53","metadata":{"papermill":{"duration":0.004895,"end_time":"2024-06-09T22:39:21.199141","exception":false,"start_time":"2024-06-09T22:39:21.194246","status":"completed"},"tags":[]},"source":["from collections import Counter\n","from sklearn.utils import shuffle\n","# Mapping of bone types\n","bone_type_mapping = {'SHOULDER': 0, 'WRIST': 1, 'HAND': 2, 'ELBOW': 3, 'FINGER': 4}\n","prefix = '/kaggle/input/mura-v11/'\n","output_directory = '/kaggle/working'\n","\n","# Load and preprocess the training data\n","train_excel_file_path = '/kaggle/input/csv-for-multiview/Patients with bone type for multiview.csv'\n","df = pd.read_csv(train_excel_file_path, header=None, names=['Path', 'Abnormal', 'Bone_type'])\n","df = df[~df['Path'].str.contains('XR_FOREARM|XR_HUMERUS')]\n","df['Bone_type'] = df['Bone_type'].map(bone_type_mapping).astype(int)\n","paths = prefix + df['Path'].astype(str)\n","labels = df['Bone_type'].astype(str)\n","t_images = pd.concat([paths, labels], axis=1)\n","\n","# Balance the training dataset\n","class_counts = Counter(labels)\n","min_class_count = min(class_counts.values())\n","\n","balanced_data = []\n","for class_label in class_counts.keys():\n","    class_samples = t_images[t_images.iloc[:, 1] == class_label]\n","    selected_samples = class_samples.sample(min_class_count, replace=False, random_state=1)\n","    balanced_data.append(selected_samples)\n","\n","balanced_train_df = pd.concat(balanced_data)\n","balanced_train_df = shuffle(balanced_train_df, random_state=1)\n","\n","# Split the balanced data into training and validation sets\n","train_df, test_df = train_test_split(balanced_train_df, train_size=0.8, shuffle=True, random_state=1)\n","print(train_df)\n","print(\"===============Done with training images===================\")\n","\n","# Load and preprocess the test data\n","test_excel_file_path = '/kaggle/input/csv-for-multiview/validation Patients with bone type for multiview.csv'\n","df = pd.read_csv(test_excel_file_path, header=None, names=['Path', 'Abnormal', 'Bone_type'])\n","df = df[~df['Path'].str.contains('XR_FOREARM|XR_HUMERUS')]\n","df['Bone_type'] = df['Bone_type'].map(bone_type_mapping).astype(int)\n","paths = prefix + df['Path'].astype(str)\n","labels = df['Bone_type'].astype(str)\n","v_images = pd.concat([paths, labels], axis=1)\n","print(\"===============Done with test images===================\")"]},{"cell_type":"code","execution_count":5,"id":"85d2000f","metadata":{"execution":{"iopub.execute_input":"2024-06-09T22:39:21.210277Z","iopub.status.busy":"2024-06-09T22:39:21.210039Z","iopub.status.idle":"2024-06-09T22:39:21.30321Z","shell.execute_reply":"2024-06-09T22:39:21.302342Z"},"papermill":{"duration":0.100832,"end_time":"2024-06-09T22:39:21.305076","exception":false,"start_time":"2024-06-09T22:39:21.204244","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["                                                    Path Bone_type\n","9666   /kaggle/input/mura-v11/MURA-v1.1/train/XR_WRIS...         1\n","9719   /kaggle/input/mura-v11/MURA-v1.1/train/XR_WRIS...         1\n","5328   /kaggle/input/mura-v11/MURA-v1.1/train/XR_FING...         4\n","2159   /kaggle/input/mura-v11/MURA-v1.1/train/XR_SHOU...         0\n","4740   /kaggle/input/mura-v11/MURA-v1.1/train/XR_FING...         4\n","...                                                  ...       ...\n","8405   /kaggle/input/mura-v11/MURA-v1.1/train/XR_WRIS...         1\n","12424  /kaggle/input/mura-v11/MURA-v1.1/train/XR_HAND...         2\n","905    /kaggle/input/mura-v11/MURA-v1.1/train/XR_SHOU...         0\n","5784   /kaggle/input/mura-v11/MURA-v1.1/train/XR_ELBO...         3\n","235    /kaggle/input/mura-v11/MURA-v1.1/train/XR_SHOU...         0\n","\n","[9590 rows x 2 columns]\n","===============Done with training images===================\n","===============Done with test images===================\n"]}],"source":["bone_type_mapping = {'SHOULDER': 0, 'WRIST': 1, 'HAND': 2, 'ELBOW': 3, 'FINGER': 4}\n","prefix = '/kaggle/input/mura-v11/'\n","output_directory = '/kaggle/working'\n","train_excel_file_path = '/kaggle/input/csv-for-multiview/Patients with bone type for multiview.csv'\n","df = pd.read_csv(train_excel_file_path, header=None,names=['Path', 'Abnormal','Bone_type'])\n","df = df[~df['Path'].str.contains('XR_FOREARM|XR_HUMERUS')]\n","df['Bone_type'] = df['Bone_type'].map(bone_type_mapping).astype(int)\n","paths = prefix + df['Path'].astype(str)\n","labels = df['Bone_type']\n","labels = labels.astype(str)\n","t_images = pd.concat([paths, labels], axis=1)\n","train_df, test_df = train_test_split(t_images, train_size=0.8, shuffle=True, random_state=1)\n","print(train_df)\n","print(\"===============Done with training images===================\")\n","test_excel_file_path = '/kaggle/input/csv-for-multiview/validation Patients with bone type for multiview.csv'\n","df = pd.read_csv(test_excel_file_path, header=None,names=['Path', 'Abnormal','Bone_type'])\n","df = df[~df['Path'].str.contains('XR_FOREARM|XR_HUMERUS')]\n","df['Bone_type'] = df['Bone_type'].map(bone_type_mapping).astype(int)\n","paths = prefix + df['Path'].astype(str)\n","labels = df['Bone_type']\n","labels = labels.astype(str)\n","v_images = pd.concat([paths, labels], axis=1)\n","print(\"===============Done with test images===================\")"]},{"cell_type":"code","execution_count":6,"id":"81f605bc","metadata":{"execution":{"iopub.execute_input":"2024-06-09T22:39:21.316524Z","iopub.status.busy":"2024-06-09T22:39:21.316265Z","iopub.status.idle":"2024-06-09T22:39:21.322145Z","shell.execute_reply":"2024-06-09T22:39:21.321292Z"},"papermill":{"duration":0.013685,"end_time":"2024-06-09T22:39:21.323943","exception":false,"start_time":"2024-06-09T22:39:21.310258","status":"completed"},"tags":[]},"outputs":[],"source":["#Callbacks Initialization\n","checkpoint_path = '/kaggle/working/Xception-after-100-epoch.keras'\n","Monitored_metric= 'val_loss' \n","# Create an EarlyStopping callback\n","early_stopping = EarlyStopping(monitor=Monitored_metric,  # The metric to monitor for early stopping\n","                               patience=10,  # Number of epochs with no improvement after which training will be stopped\n","                               verbose=1,  # Verbosity level\n","                               restore_best_weights=True)  # Restore model weights from the epoch with the best value of the monitored metric\n","\n","# Create a ModelCheckpoint callback\n","model_checkpoint = ModelCheckpoint(checkpoint_path,\n","                                   monitor=Monitored_metric,  # The metric to monitor for saving the best model\n","                                   save_best_only=True,  # Save only the best model\n","                                   mode='min',  # Mode for the 'monitor' metric (e.g., 'min' for loss)\n","                                   verbose=1)  # Verbosity level\n","learn_control = tf.keras.callbacks.ReduceLROnPlateau(monitor=Monitored_metric, \n","                                  patience=3,\n","                                  verbose=1,\n","                                  factor=0.2, \n","                                  min_lr=1e-7)"]},{"cell_type":"markdown","id":"cb4c0542","metadata":{"execution":{"iopub.execute_input":"2024-06-09T16:23:31.508943Z","iopub.status.busy":"2024-06-09T16:23:31.507903Z","iopub.status.idle":"2024-06-09T16:23:31.518048Z","shell.execute_reply":"2024-06-09T16:23:31.51704Z","shell.execute_reply.started":"2024-06-09T16:23:31.508908Z"},"papermill":{"duration":0.004899,"end_time":"2024-06-09T22:39:21.333978","exception":false,"start_time":"2024-06-09T22:39:21.329079","status":"completed"},"tags":[]},"source":["batch_size = 16 \n","from tensorflow.keras.models import Model\n","#Model Architecture\n","def build_model(hp):\n","    base_model = Xception(weights='imagenet', include_top=False, input_shape=image_shape)\n","    inputs = [Input(shape=image_shape) for _ in range(num_views)]\n","    encoded_views = [base_model(view_input) for view_input in inputs]\n","    pooled_views = [GlobalAveragePooling2D()(view_output) for view_output in encoded_views]\n","    stacked_views = StackLayer(axis=1)(pooled_views)\n","    context_vector = AttentionLayer()(stacked_views)\n","\n","    x = Dense(hp.Int('units', min_value=128, max_value=1024, step=128), activation='relu', kernel_regularizer=l2(0.001))(context_vector)\n","    x = BatchNormalization()(x)\n","    x = Dropout(hp.Float('dropout', min_value=0.2, max_value=0.7, step=0.1))(x)\n","    predictions = Dense(num_classes, activation=\"softmax\", kernel_regularizer=l2(0.001))(x)\n","    \n","    model = Model(inputs=inputs, outputs=predictions)\n","    model.compile(optimizer=tf.keras.optimizers.Nadam(hp.Float('learning_rate', 1e-4, 1e-2, sampling='log')),\n","                  loss='categorical_crossentropy', metrics=[\"accuracy\", \"recall\"])\n","    return model\n"]},{"cell_type":"code","execution_count":7,"id":"81b69006","metadata":{"execution":{"iopub.execute_input":"2024-06-09T22:39:21.345188Z","iopub.status.busy":"2024-06-09T22:39:21.344944Z","iopub.status.idle":"2024-06-09T22:39:33.929433Z","shell.execute_reply":"2024-06-09T22:39:33.928591Z"},"papermill":{"duration":12.592436,"end_time":"2024-06-09T22:39:33.931459","exception":false,"start_time":"2024-06-09T22:39:21.339023","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["Downloading data from https://storage.googleapis.com/tensorflow/keras-applications/xception/xception_weights_tf_dim_ordering_tf_kernels_notop.h5\n","\u001b[1m83683744/83683744\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 0us/step\n"]},{"name":"stderr","output_type":"stream","text":["/opt/conda/lib/python3.10/site-packages/keras/src/saving/saving_lib.py:418: UserWarning: Skipping variable loading for optimizer 'loss_scale_optimizer', because it has 4 variables whereas the saved optimizer has 26 variables. \n","  trackable.load_own_variables(weights_store.get(inner_path))\n","/opt/conda/lib/python3.10/site-packages/keras/src/saving/saving_lib.py:418: UserWarning: Skipping variable loading for optimizer 'nadam', because it has 2 variables whereas the saved optimizer has 22 variables. \n","  trackable.load_own_variables(weights_store.get(inner_path))\n"]},{"data":{"text/html":["<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"functional_1\"</span>\n","</pre>\n"],"text/plain":["\u001b[1mModel: \"functional_1\"\u001b[0m\n"]},"metadata":{},"output_type":"display_data"},{"data":{"text/html":["<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┓\n","┃<span style=\"font-weight: bold\"> Layer (type)        </span>┃<span style=\"font-weight: bold\"> Output Shape      </span>┃<span style=\"font-weight: bold\">    Param # </span>┃<span style=\"font-weight: bold\"> Connected to      </span>┃\n","┡━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━┩\n","│ input_layer_1       │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">224</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">224</span>,  │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ -                 │\n","│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">InputLayer</span>)        │ <span style=\"color: #00af00; text-decoration-color: #00af00\">3</span>)                │            │                   │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ input_layer_2       │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">224</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">224</span>,  │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ -                 │\n","│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">InputLayer</span>)        │ <span style=\"color: #00af00; text-decoration-color: #00af00\">3</span>)                │            │                   │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ input_layer_3       │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">224</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">224</span>,  │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ -                 │\n","│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">InputLayer</span>)        │ <span style=\"color: #00af00; text-decoration-color: #00af00\">3</span>)                │            │                   │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ input_layer_4       │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">224</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">224</span>,  │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ -                 │\n","│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">InputLayer</span>)        │ <span style=\"color: #00af00; text-decoration-color: #00af00\">3</span>)                │            │                   │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ input_layer_5       │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">224</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">224</span>,  │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ -                 │\n","│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">InputLayer</span>)        │ <span style=\"color: #00af00; text-decoration-color: #00af00\">3</span>)                │            │                   │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ input_layer_6       │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">224</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">224</span>,  │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ -                 │\n","│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">InputLayer</span>)        │ <span style=\"color: #00af00; text-decoration-color: #00af00\">3</span>)                │            │                   │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ input_layer_7       │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">224</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">224</span>,  │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ -                 │\n","│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">InputLayer</span>)        │ <span style=\"color: #00af00; text-decoration-color: #00af00\">3</span>)                │            │                   │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ xception            │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">7</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">7</span>,      │ <span style=\"color: #00af00; text-decoration-color: #00af00\">20,861,480</span> │ input_layer_1[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]… │\n","│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Functional</span>)        │ <span style=\"color: #00af00; text-decoration-color: #00af00\">2048</span>)             │            │ input_layer_2[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]… │\n","│                     │                   │            │ input_layer_3[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]… │\n","│                     │                   │            │ input_layer_4[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]… │\n","│                     │                   │            │ input_layer_5[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]… │\n","│                     │                   │            │ input_layer_6[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]… │\n","│                     │                   │            │ input_layer_7[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]… │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ global_average_poo… │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2048</span>)      │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ xception[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]    │\n","│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GlobalAveragePool…</span> │                   │            │                   │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ global_average_poo… │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2048</span>)      │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ xception[<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]    │\n","│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GlobalAveragePool…</span> │                   │            │                   │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ global_average_poo… │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2048</span>)      │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ xception[<span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]    │\n","│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GlobalAveragePool…</span> │                   │            │                   │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ global_average_poo… │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2048</span>)      │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ xception[<span style=\"color: #00af00; text-decoration-color: #00af00\">3</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]    │\n","│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GlobalAveragePool…</span> │                   │            │                   │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ global_average_poo… │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2048</span>)      │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ xception[<span style=\"color: #00af00; text-decoration-color: #00af00\">4</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]    │\n","│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GlobalAveragePool…</span> │                   │            │                   │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ global_average_poo… │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2048</span>)      │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ xception[<span style=\"color: #00af00; text-decoration-color: #00af00\">5</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]    │\n","│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GlobalAveragePool…</span> │                   │            │                   │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ global_average_poo… │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2048</span>)      │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ xception[<span style=\"color: #00af00; text-decoration-color: #00af00\">6</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]    │\n","│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GlobalAveragePool…</span> │                   │            │                   │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ stack_layer         │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">7</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2048</span>)   │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ global_average_p… │\n","│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">StackLayer</span>)        │                   │            │ global_average_p… │\n","│                     │                   │            │ global_average_p… │\n","│                     │                   │            │ global_average_p… │\n","│                     │                   │            │ global_average_p… │\n","│                     │                   │            │ global_average_p… │\n","│                     │                   │            │ global_average_p… │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ attention_layer     │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2048</span>)      │  <span style=\"color: #00af00; text-decoration-color: #00af00\">4,198,401</span> │ stack_layer[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>] │\n","│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">AttentionLayer</span>)    │                   │            │                   │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ dense_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)     │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span>)       │  <span style=\"color: #00af00; text-decoration-color: #00af00\">1,049,088</span> │ attention_layer[<span style=\"color: #00af00; text-decoration-color: #00af00\">…</span> │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ batch_normalizatio… │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span>)       │      <span style=\"color: #00af00; text-decoration-color: #00af00\">2,048</span> │ dense_2[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]     │\n","│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalizatio…</span> │                   │            │                   │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ dropout (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)   │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span>)       │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ batch_normalizat… │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ dense_3 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)     │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">5</span>)         │      <span style=\"color: #00af00; text-decoration-color: #00af00\">2,565</span> │ dropout[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]     │\n","└─────────────────────┴───────────────────┴────────────┴───────────────────┘\n","</pre>\n"],"text/plain":["┏━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┓\n","┃\u001b[1m \u001b[0m\u001b[1mLayer (type)       \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape     \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m   Param #\u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mConnected to     \u001b[0m\u001b[1m \u001b[0m┃\n","┡━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━┩\n","│ input_layer_1       │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m224\u001b[0m, \u001b[38;5;34m224\u001b[0m,  │          \u001b[38;5;34m0\u001b[0m │ -                 │\n","│ (\u001b[38;5;33mInputLayer\u001b[0m)        │ \u001b[38;5;34m3\u001b[0m)                │            │                   │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ input_layer_2       │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m224\u001b[0m, \u001b[38;5;34m224\u001b[0m,  │          \u001b[38;5;34m0\u001b[0m │ -                 │\n","│ (\u001b[38;5;33mInputLayer\u001b[0m)        │ \u001b[38;5;34m3\u001b[0m)                │            │                   │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ input_layer_3       │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m224\u001b[0m, \u001b[38;5;34m224\u001b[0m,  │          \u001b[38;5;34m0\u001b[0m │ -                 │\n","│ (\u001b[38;5;33mInputLayer\u001b[0m)        │ \u001b[38;5;34m3\u001b[0m)                │            │                   │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ input_layer_4       │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m224\u001b[0m, \u001b[38;5;34m224\u001b[0m,  │          \u001b[38;5;34m0\u001b[0m │ -                 │\n","│ (\u001b[38;5;33mInputLayer\u001b[0m)        │ \u001b[38;5;34m3\u001b[0m)                │            │                   │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ input_layer_5       │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m224\u001b[0m, \u001b[38;5;34m224\u001b[0m,  │          \u001b[38;5;34m0\u001b[0m │ -                 │\n","│ (\u001b[38;5;33mInputLayer\u001b[0m)        │ \u001b[38;5;34m3\u001b[0m)                │            │                   │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ input_layer_6       │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m224\u001b[0m, \u001b[38;5;34m224\u001b[0m,  │          \u001b[38;5;34m0\u001b[0m │ -                 │\n","│ (\u001b[38;5;33mInputLayer\u001b[0m)        │ \u001b[38;5;34m3\u001b[0m)                │            │                   │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ input_layer_7       │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m224\u001b[0m, \u001b[38;5;34m224\u001b[0m,  │          \u001b[38;5;34m0\u001b[0m │ -                 │\n","│ (\u001b[38;5;33mInputLayer\u001b[0m)        │ \u001b[38;5;34m3\u001b[0m)                │            │                   │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ xception            │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m7\u001b[0m, \u001b[38;5;34m7\u001b[0m,      │ \u001b[38;5;34m20,861,480\u001b[0m │ input_layer_1[\u001b[38;5;34m0\u001b[0m]… │\n","│ (\u001b[38;5;33mFunctional\u001b[0m)        │ \u001b[38;5;34m2048\u001b[0m)             │            │ input_layer_2[\u001b[38;5;34m0\u001b[0m]… │\n","│                     │                   │            │ input_layer_3[\u001b[38;5;34m0\u001b[0m]… │\n","│                     │                   │            │ input_layer_4[\u001b[38;5;34m0\u001b[0m]… │\n","│                     │                   │            │ input_layer_5[\u001b[38;5;34m0\u001b[0m]… │\n","│                     │                   │            │ input_layer_6[\u001b[38;5;34m0\u001b[0m]… │\n","│                     │                   │            │ input_layer_7[\u001b[38;5;34m0\u001b[0m]… │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ global_average_poo… │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m2048\u001b[0m)      │          \u001b[38;5;34m0\u001b[0m │ xception[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]    │\n","│ (\u001b[38;5;33mGlobalAveragePool…\u001b[0m │                   │            │                   │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ global_average_poo… │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m2048\u001b[0m)      │          \u001b[38;5;34m0\u001b[0m │ xception[\u001b[38;5;34m1\u001b[0m][\u001b[38;5;34m0\u001b[0m]    │\n","│ (\u001b[38;5;33mGlobalAveragePool…\u001b[0m │                   │            │                   │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ global_average_poo… │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m2048\u001b[0m)      │          \u001b[38;5;34m0\u001b[0m │ xception[\u001b[38;5;34m2\u001b[0m][\u001b[38;5;34m0\u001b[0m]    │\n","│ (\u001b[38;5;33mGlobalAveragePool…\u001b[0m │                   │            │                   │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ global_average_poo… │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m2048\u001b[0m)      │          \u001b[38;5;34m0\u001b[0m │ xception[\u001b[38;5;34m3\u001b[0m][\u001b[38;5;34m0\u001b[0m]    │\n","│ (\u001b[38;5;33mGlobalAveragePool…\u001b[0m │                   │            │                   │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ global_average_poo… │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m2048\u001b[0m)      │          \u001b[38;5;34m0\u001b[0m │ xception[\u001b[38;5;34m4\u001b[0m][\u001b[38;5;34m0\u001b[0m]    │\n","│ (\u001b[38;5;33mGlobalAveragePool…\u001b[0m │                   │            │                   │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ global_average_poo… │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m2048\u001b[0m)      │          \u001b[38;5;34m0\u001b[0m │ xception[\u001b[38;5;34m5\u001b[0m][\u001b[38;5;34m0\u001b[0m]    │\n","│ (\u001b[38;5;33mGlobalAveragePool…\u001b[0m │                   │            │                   │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ global_average_poo… │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m2048\u001b[0m)      │          \u001b[38;5;34m0\u001b[0m │ xception[\u001b[38;5;34m6\u001b[0m][\u001b[38;5;34m0\u001b[0m]    │\n","│ (\u001b[38;5;33mGlobalAveragePool…\u001b[0m │                   │            │                   │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ stack_layer         │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m7\u001b[0m, \u001b[38;5;34m2048\u001b[0m)   │          \u001b[38;5;34m0\u001b[0m │ global_average_p… │\n","│ (\u001b[38;5;33mStackLayer\u001b[0m)        │                   │            │ global_average_p… │\n","│                     │                   │            │ global_average_p… │\n","│                     │                   │            │ global_average_p… │\n","│                     │                   │            │ global_average_p… │\n","│                     │                   │            │ global_average_p… │\n","│                     │                   │            │ global_average_p… │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ attention_layer     │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m2048\u001b[0m)      │  \u001b[38;5;34m4,198,401\u001b[0m │ stack_layer[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m] │\n","│ (\u001b[38;5;33mAttentionLayer\u001b[0m)    │                   │            │                   │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ dense_2 (\u001b[38;5;33mDense\u001b[0m)     │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m512\u001b[0m)       │  \u001b[38;5;34m1,049,088\u001b[0m │ attention_layer[\u001b[38;5;34m…\u001b[0m │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ batch_normalizatio… │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m512\u001b[0m)       │      \u001b[38;5;34m2,048\u001b[0m │ dense_2[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]     │\n","│ (\u001b[38;5;33mBatchNormalizatio…\u001b[0m │                   │            │                   │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ dropout (\u001b[38;5;33mDropout\u001b[0m)   │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m512\u001b[0m)       │          \u001b[38;5;34m0\u001b[0m │ batch_normalizat… │\n","├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n","│ dense_3 (\u001b[38;5;33mDense\u001b[0m)     │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m5\u001b[0m)         │      \u001b[38;5;34m2,565\u001b[0m │ dropout[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]     │\n","└─────────────────────┴───────────────────┴────────────┴───────────────────┘\n"]},"metadata":{},"output_type":"display_data"},{"data":{"text/html":["<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">26,113,582</span> (99.62 MB)\n","</pre>\n"],"text/plain":["\u001b[1m Total params: \u001b[0m\u001b[38;5;34m26,113,582\u001b[0m (99.62 MB)\n"]},"metadata":{},"output_type":"display_data"},{"data":{"text/html":["<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">5,251,078</span> (20.03 MB)\n","</pre>\n"],"text/plain":["\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m5,251,078\u001b[0m (20.03 MB)\n"]},"metadata":{},"output_type":"display_data"},{"data":{"text/html":["<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">20,862,504</span> (79.58 MB)\n","</pre>\n"],"text/plain":["\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m20,862,504\u001b[0m (79.58 MB)\n"]},"metadata":{},"output_type":"display_data"}],"source":["batch_size = 32 \n","from tensorflow.keras.models import Model\n","#Model Architecture\n","base_model = Xception(weights='imagenet', include_top=False, input_shape=image_shape)\n","\n","base_model.trainable = False\n","\n","inputs = [Input(shape=image_shape) for _ in range(num_views)]\n","\n","encoded_views = [base_model(view_input) for view_input in inputs]\n","\n","# Apply GlobalAveragePooling to each view's output\n","pooled_views = [GlobalAveragePooling2D()(view_output) for view_output in encoded_views]\n","\n","# Stack the pooled views to apply the attention mechanism\n","stacked_views = StackLayer(axis=1)(pooled_views)  # Shape: (batch_size, num_views, feature_dim)\n","    \n","# Apply the attention layer\n","context_vector = AttentionLayer()(stacked_views)\n","\n","# Add custom layers on top\n","x = Dense(512, activation='relu', kernel_regularizer=l2(0.001))(context_vector)\n","x = BatchNormalization()(x)\n","x = Dropout(0.5)(x)\n","predictions = Dense(num_classes, activation=\"softmax\", kernel_regularizer=l2(0.001))(x)\n","\n","model = Model(inputs=inputs, outputs=predictions)\n","model.compile(optimizer='nadam', loss='categorical_crossentropy', metrics=[\"accuracy\", \"recall\"])\n","model.load_weights(\"/kaggle/input/bone-type-midway-multi/keras/xception-trails/1/xceptionattentionregularizedno-hypertuning.keras\")\n","model.summary()"]},{"cell_type":"code","execution_count":8,"id":"8e37d7e6","metadata":{"execution":{"iopub.execute_input":"2024-06-09T22:39:33.953051Z","iopub.status.busy":"2024-06-09T22:39:33.952784Z","iopub.status.idle":"2024-06-09T22:39:33.96478Z","shell.execute_reply":"2024-06-09T22:39:33.96391Z"},"papermill":{"duration":0.024913,"end_time":"2024-06-09T22:39:33.966671","exception":false,"start_time":"2024-06-09T22:39:33.941758","status":"completed"},"tags":[]},"outputs":[],"source":["#Data Generators Initialization \n","train_paths,train_labels = train_df['Path'] , train_df['Bone_type']\n","valid_paths,valid_labels = test_df['Path'] , test_df['Bone_type']\n","test_paths,test_labels = v_images['Path'] , v_images['Bone_type']\n","\n","train_generator = CustomDataGenerator(train_paths, train_labels, batch_size, image_shape, num_classes)\n","valid_generator = CustomDataGenerator(valid_paths, valid_labels, batch_size, image_shape, num_classes)\n","test_generator = CustomDataGenerator(test_paths, test_labels, batch_size, image_shape, num_classes)"]},{"cell_type":"markdown","id":"cbf1dd7d","metadata":{"execution":{"iopub.execute_input":"2024-06-09T16:23:34.45283Z","iopub.status.busy":"2024-06-09T16:23:34.451986Z","iopub.status.idle":"2024-06-09T16:23:34.46721Z","shell.execute_reply":"2024-06-09T16:23:34.466263Z","shell.execute_reply.started":"2024-06-09T16:23:34.452797Z"},"papermill":{"duration":0.00976,"end_time":"2024-06-09T22:39:33.986417","exception":false,"start_time":"2024-06-09T22:39:33.976657","status":"completed"},"tags":[]},"source":["tuner = RandomSearch(\n","    build_model,\n","    objective='val_accuracy',\n","    max_trials=10,\n","    executions_per_trial=1,\n","    directory='/kaggle/working/results',\n","    project_name='xception_model_tuning'\n",")"]},{"cell_type":"markdown","id":"8f1eadbc","metadata":{"execution":{"iopub.execute_input":"2024-06-09T16:23:38.652326Z","iopub.status.busy":"2024-06-09T16:23:38.6516Z","iopub.status.idle":"2024-06-09T16:32:17.279193Z","shell.execute_reply":"2024-06-09T16:32:17.277567Z","shell.execute_reply.started":"2024-06-09T16:23:38.652296Z"},"papermill":{"duration":0.011947,"end_time":"2024-06-09T22:39:34.012406","exception":false,"start_time":"2024-06-09T22:39:34.000459","status":"completed"},"tags":[]},"source":["tuner.search(train_generator, validation_data=valid_generator, epochs=10,callbacks=[early_stopping,model_checkpoint, learn_control],verbose=1)"]},{"cell_type":"code","execution_count":9,"id":"13d92d78","metadata":{"execution":{"iopub.execute_input":"2024-06-09T22:39:34.040767Z","iopub.status.busy":"2024-06-09T22:39:34.039936Z","iopub.status.idle":"2024-06-10T04:27:41.725911Z","shell.execute_reply":"2024-06-10T04:27:41.725021Z"},"papermill":{"duration":20887.701885,"end_time":"2024-06-10T04:27:41.728325","exception":false,"start_time":"2024-06-09T22:39:34.02644","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["Epoch 1/50\n"]},{"name":"stderr","output_type":"stream","text":["WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n","I0000 00:00:1717972845.146974      68 device_compiler.h:186] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n"]},{"name":"stdout","output_type":"stream","text":["\n","Epoch 1: val_loss improved from inf to 12.19290, saving model to /kaggle/working/Xception-after-100-epoch.keras\n","299/299 - 730s - 2s/step - accuracy: 0.6849 - loss: 0.9197 - recall: 0.5422 - val_accuracy: 0.2458 - val_loss: 12.1929 - val_recall: 0.2458 - learning_rate: 0.0010\n","Epoch 2/50\n","\n","Epoch 2: val_loss improved from 12.19290 to 9.01888, saving model to /kaggle/working/Xception-after-100-epoch.keras\n","299/299 - 424s - 1s/step - accuracy: 0.6699 - loss: 0.9519 - recall: 0.5198 - val_accuracy: 0.3649 - val_loss: 9.0189 - val_recall: 0.3606 - learning_rate: 0.0010\n","Epoch 3/50\n","\n","Epoch 3: val_loss did not improve from 9.01888\n","299/299 - 437s - 1s/step - accuracy: 0.6577 - loss: 0.9795 - recall: 0.4770 - val_accuracy: 0.2470 - val_loss: 12.1793 - val_recall: 0.2470 - learning_rate: 0.0010\n","Epoch 4/50\n","\n","Epoch 4: val_loss did not improve from 9.01888\n","299/299 - 422s - 1s/step - accuracy: 0.6648 - loss: 0.9815 - recall: 0.4801 - val_accuracy: 0.2466 - val_loss: 12.1880 - val_recall: 0.2466 - learning_rate: 0.0010\n","Epoch 5/50\n","\n","Epoch 5: val_loss did not improve from 9.01888\n","\n","Epoch 5: ReduceLROnPlateau reducing learning rate to 0.00020000000949949026.\n","299/299 - 431s - 1s/step - accuracy: 0.6836 - loss: 0.9380 - recall: 0.5199 - val_accuracy: 0.2483 - val_loss: 11.9278 - val_recall: 0.2483 - learning_rate: 0.0010\n","Epoch 6/50\n","\n","Epoch 6: val_loss did not improve from 9.01888\n","299/299 - 410s - 1s/step - accuracy: 0.6983 - loss: 0.8986 - recall: 0.5453 - val_accuracy: 0.2905 - val_loss: 10.8359 - val_recall: 0.2905 - learning_rate: 2.0000e-04\n","Epoch 7/50\n","\n","Epoch 7: val_loss did not improve from 9.01888\n","299/299 - 417s - 1s/step - accuracy: 0.7063 - loss: 0.8934 - recall: 0.5586 - val_accuracy: 0.2939 - val_loss: 9.5971 - val_recall: 0.2939 - learning_rate: 2.0000e-04\n","Epoch 8/50\n","\n","Epoch 8: val_loss did not improve from 9.01888\n","\n","Epoch 8: ReduceLROnPlateau reducing learning rate to 4.0000001899898055e-05.\n","299/299 - 438s - 1s/step - accuracy: 0.7103 - loss: 0.8763 - recall: 0.5681 - val_accuracy: 0.1579 - val_loss: 13.6167 - val_recall: 0.1579 - learning_rate: 2.0000e-04\n","Epoch 9/50\n","\n","Epoch 9: val_loss improved from 9.01888 to 5.33313, saving model to /kaggle/working/Xception-after-100-epoch.keras\n","299/299 - 409s - 1s/step - accuracy: 0.7112 - loss: 0.8694 - recall: 0.5718 - val_accuracy: 0.3687 - val_loss: 5.3331 - val_recall: 0.3670 - learning_rate: 4.0000e-05\n","Epoch 10/50\n","\n","Epoch 10: val_loss did not improve from 5.33313\n","299/299 - 410s - 1s/step - accuracy: 0.7124 - loss: 0.8695 - recall: 0.5770 - val_accuracy: 0.1571 - val_loss: 11.6843 - val_recall: 0.1571 - learning_rate: 4.0000e-05\n","Epoch 11/50\n","\n","Epoch 11: val_loss did not improve from 5.33313\n","299/299 - 425s - 1s/step - accuracy: 0.7177 - loss: 0.8582 - recall: 0.5865 - val_accuracy: 0.1634 - val_loss: 9.1540 - val_recall: 0.1634 - learning_rate: 4.0000e-05\n","Epoch 12/50\n","\n","Epoch 12: val_loss did not improve from 5.33313\n","\n","Epoch 12: ReduceLROnPlateau reducing learning rate to 8.000000525498762e-06.\n","299/299 - 428s - 1s/step - accuracy: 0.7161 - loss: 0.8642 - recall: 0.5863 - val_accuracy: 0.2458 - val_loss: 11.2609 - val_recall: 0.2458 - learning_rate: 4.0000e-05\n","Epoch 13/50\n","\n","Epoch 13: val_loss improved from 5.33313 to 3.36623, saving model to /kaggle/working/Xception-after-100-epoch.keras\n","299/299 - 438s - 1s/step - accuracy: 0.7168 - loss: 0.8655 - recall: 0.5843 - val_accuracy: 0.2542 - val_loss: 3.3662 - val_recall: 0.2534 - learning_rate: 8.0000e-06\n","Epoch 14/50\n","\n","Epoch 14: val_loss improved from 3.36623 to 2.53727, saving model to /kaggle/working/Xception-after-100-epoch.keras\n","299/299 - 425s - 1s/step - accuracy: 0.7191 - loss: 0.8552 - recall: 0.5830 - val_accuracy: 0.3847 - val_loss: 2.5373 - val_recall: 0.3830 - learning_rate: 8.0000e-06\n","Epoch 15/50\n","\n","Epoch 15: val_loss improved from 2.53727 to 1.27284, saving model to /kaggle/working/Xception-after-100-epoch.keras\n","299/299 - 416s - 1s/step - accuracy: 0.7195 - loss: 0.8612 - recall: 0.5794 - val_accuracy: 0.5194 - val_loss: 1.2728 - val_recall: 0.4776 - learning_rate: 8.0000e-06\n","Epoch 16/50\n","\n","Epoch 16: val_loss did not improve from 1.27284\n","299/299 - 449s - 2s/step - accuracy: 0.7212 - loss: 0.8453 - recall: 0.5916 - val_accuracy: 0.4248 - val_loss: 2.0110 - val_recall: 0.4105 - learning_rate: 8.0000e-06\n","Epoch 17/50\n","\n","Epoch 17: val_loss did not improve from 1.27284\n","299/299 - 429s - 1s/step - accuracy: 0.7169 - loss: 0.8570 - recall: 0.5787 - val_accuracy: 0.3391 - val_loss: 2.5611 - val_recall: 0.3285 - learning_rate: 8.0000e-06\n","Epoch 18/50\n","\n","Epoch 18: val_loss did not improve from 1.27284\n","\n","Epoch 18: ReduceLROnPlateau reducing learning rate to 1.6000001778593287e-06.\n","299/299 - 425s - 1s/step - accuracy: 0.7186 - loss: 0.8589 - recall: 0.5832 - val_accuracy: 0.4979 - val_loss: 1.3029 - val_recall: 0.4219 - learning_rate: 8.0000e-06\n","Epoch 19/50\n","\n","Epoch 19: val_loss improved from 1.27284 to 0.81969, saving model to /kaggle/working/Xception-after-100-epoch.keras\n","299/299 - 442s - 1s/step - accuracy: 0.7169 - loss: 0.8577 - recall: 0.5847 - val_accuracy: 0.7272 - val_loss: 0.8197 - val_recall: 0.6128 - learning_rate: 1.6000e-06\n","Epoch 20/50\n","\n","Epoch 20: val_loss did not improve from 0.81969\n","299/299 - 423s - 1s/step - accuracy: 0.7213 - loss: 0.8543 - recall: 0.5859 - val_accuracy: 0.7293 - val_loss: 0.8347 - val_recall: 0.6123 - learning_rate: 1.6000e-06\n","Epoch 21/50\n","\n","Epoch 21: val_loss did not improve from 0.81969\n","299/299 - 437s - 1s/step - accuracy: 0.7176 - loss: 0.8523 - recall: 0.5847 - val_accuracy: 0.6926 - val_loss: 0.8782 - val_recall: 0.5878 - learning_rate: 1.6000e-06\n","Epoch 22/50\n","\n","Epoch 22: val_loss improved from 0.81969 to 0.81924, saving model to /kaggle/working/Xception-after-100-epoch.keras\n","299/299 - 426s - 1s/step - accuracy: 0.7200 - loss: 0.8545 - recall: 0.5871 - val_accuracy: 0.7196 - val_loss: 0.8192 - val_recall: 0.6047 - learning_rate: 1.6000e-06\n","Epoch 23/50\n","\n","Epoch 23: val_loss did not improve from 0.81924\n","299/299 - 433s - 1s/step - accuracy: 0.7276 - loss: 0.8529 - recall: 0.5897 - val_accuracy: 0.6938 - val_loss: 0.8787 - val_recall: 0.5676 - learning_rate: 1.6000e-06\n","Epoch 24/50\n","\n","Epoch 24: val_loss did not improve from 0.81924\n","299/299 - 450s - 2s/step - accuracy: 0.7159 - loss: 0.8586 - recall: 0.5853 - val_accuracy: 0.7095 - val_loss: 0.8500 - val_recall: 0.5832 - learning_rate: 1.6000e-06\n","Epoch 25/50\n","\n","Epoch 25: val_loss did not improve from 0.81924\n","\n","Epoch 25: ReduceLROnPlateau reducing learning rate to 3.200000264769187e-07.\n","299/299 - 482s - 2s/step - accuracy: 0.7162 - loss: 0.8499 - recall: 0.5907 - val_accuracy: 0.7145 - val_loss: 0.8406 - val_recall: 0.5954 - learning_rate: 1.6000e-06\n","Epoch 26/50\n","\n","Epoch 26: val_loss improved from 0.81924 to 0.78657, saving model to /kaggle/working/Xception-after-100-epoch.keras\n","299/299 - 413s - 1s/step - accuracy: 0.7172 - loss: 0.8541 - recall: 0.5881 - val_accuracy: 0.7424 - val_loss: 0.7866 - val_recall: 0.6309 - learning_rate: 3.2000e-07\n","Epoch 27/50\n","\n","Epoch 27: val_loss improved from 0.78657 to 0.78346, saving model to /kaggle/working/Xception-after-100-epoch.keras\n","299/299 - 440s - 1s/step - accuracy: 0.7209 - loss: 0.8520 - recall: 0.5865 - val_accuracy: 0.7428 - val_loss: 0.7835 - val_recall: 0.6288 - learning_rate: 3.2000e-07\n","Epoch 28/50\n","\n","Epoch 28: val_loss improved from 0.78346 to 0.78220, saving model to /kaggle/working/Xception-after-100-epoch.keras\n","299/299 - 424s - 1s/step - accuracy: 0.7227 - loss: 0.8542 - recall: 0.5873 - val_accuracy: 0.7437 - val_loss: 0.7822 - val_recall: 0.6254 - learning_rate: 3.2000e-07\n","Epoch 29/50\n","\n","Epoch 29: val_loss did not improve from 0.78220\n","299/299 - 433s - 1s/step - accuracy: 0.7154 - loss: 0.8510 - recall: 0.5841 - val_accuracy: 0.7390 - val_loss: 0.7887 - val_recall: 0.6187 - learning_rate: 3.2000e-07\n","Epoch 30/50\n","\n","Epoch 30: val_loss did not improve from 0.78220\n","299/299 - 417s - 1s/step - accuracy: 0.7181 - loss: 0.8490 - recall: 0.5858 - val_accuracy: 0.7437 - val_loss: 0.7895 - val_recall: 0.6204 - learning_rate: 3.2000e-07\n","Epoch 31/50\n","\n","Epoch 31: val_loss improved from 0.78220 to 0.78198, saving model to /kaggle/working/Xception-after-100-epoch.keras\n","299/299 - 419s - 1s/step - accuracy: 0.7216 - loss: 0.8423 - recall: 0.5911 - val_accuracy: 0.7432 - val_loss: 0.7820 - val_recall: 0.6330 - learning_rate: 3.2000e-07\n","Epoch 32/50\n","\n","Epoch 32: val_loss did not improve from 0.78198\n","299/299 - 451s - 2s/step - accuracy: 0.7186 - loss: 0.8590 - recall: 0.5860 - val_accuracy: 0.7475 - val_loss: 0.7833 - val_recall: 0.6288 - learning_rate: 3.2000e-07\n","Epoch 33/50\n","\n","Epoch 33: val_loss did not improve from 0.78198\n","299/299 - 422s - 1s/step - accuracy: 0.7248 - loss: 0.8500 - recall: 0.5931 - val_accuracy: 0.7407 - val_loss: 0.7841 - val_recall: 0.6250 - learning_rate: 3.2000e-07\n","Epoch 34/50\n","\n","Epoch 34: val_loss did not improve from 0.78198\n","\n","Epoch 34: ReduceLROnPlateau reducing learning rate to 1e-07.\n","299/299 - 410s - 1s/step - accuracy: 0.7231 - loss: 0.8488 - recall: 0.5881 - val_accuracy: 0.7428 - val_loss: 0.7828 - val_recall: 0.6250 - learning_rate: 3.2000e-07\n","Epoch 35/50\n","\n","Epoch 35: val_loss did not improve from 0.78198\n","299/299 - 443s - 1s/step - accuracy: 0.7186 - loss: 0.8543 - recall: 0.5886 - val_accuracy: 0.7411 - val_loss: 0.7831 - val_recall: 0.6288 - learning_rate: 1.0000e-07\n","Epoch 36/50\n","\n","Epoch 36: val_loss improved from 0.78198 to 0.78115, saving model to /kaggle/working/Xception-after-100-epoch.keras\n","299/299 - 433s - 1s/step - accuracy: 0.7181 - loss: 0.8490 - recall: 0.5888 - val_accuracy: 0.7420 - val_loss: 0.7811 - val_recall: 0.6305 - learning_rate: 1.0000e-07\n","Epoch 37/50\n","\n","Epoch 37: val_loss did not improve from 0.78115\n","299/299 - 424s - 1s/step - accuracy: 0.7156 - loss: 0.8572 - recall: 0.5840 - val_accuracy: 0.7449 - val_loss: 0.7823 - val_recall: 0.6296 - learning_rate: 1.0000e-07\n","Epoch 38/50\n","\n","Epoch 38: val_loss improved from 0.78115 to 0.77916, saving model to /kaggle/working/Xception-after-100-epoch.keras\n","299/299 - 421s - 1s/step - accuracy: 0.7162 - loss: 0.8569 - recall: 0.5863 - val_accuracy: 0.7432 - val_loss: 0.7792 - val_recall: 0.6267 - learning_rate: 1.0000e-07\n","Epoch 39/50\n","\n","Epoch 39: val_loss did not improve from 0.77916\n","299/299 - 413s - 1s/step - accuracy: 0.7232 - loss: 0.8502 - recall: 0.5902 - val_accuracy: 0.7420 - val_loss: 0.7838 - val_recall: 0.6288 - learning_rate: 1.0000e-07\n","Epoch 40/50\n","\n","Epoch 40: val_loss did not improve from 0.77916\n","299/299 - 430s - 1s/step - accuracy: 0.7202 - loss: 0.8557 - recall: 0.5905 - val_accuracy: 0.7454 - val_loss: 0.7842 - val_recall: 0.6250 - learning_rate: 1.0000e-07\n","Epoch 41/50\n","\n","Epoch 41: val_loss did not improve from 0.77916\n","299/299 - 426s - 1s/step - accuracy: 0.7153 - loss: 0.8548 - recall: 0.5895 - val_accuracy: 0.7487 - val_loss: 0.7794 - val_recall: 0.6347 - learning_rate: 1.0000e-07\n","Epoch 42/50\n","\n","Epoch 42: val_loss did not improve from 0.77916\n","299/299 - 436s - 1s/step - accuracy: 0.7223 - loss: 0.8468 - recall: 0.5911 - val_accuracy: 0.7475 - val_loss: 0.7811 - val_recall: 0.6296 - learning_rate: 1.0000e-07\n","Epoch 43/50\n","\n","Epoch 43: val_loss did not improve from 0.77916\n","299/299 - 456s - 2s/step - accuracy: 0.7189 - loss: 0.8525 - recall: 0.5880 - val_accuracy: 0.7470 - val_loss: 0.7814 - val_recall: 0.6263 - learning_rate: 1.0000e-07\n","Epoch 44/50\n","\n","Epoch 44: val_loss did not improve from 0.77916\n","299/299 - 433s - 1s/step - accuracy: 0.7228 - loss: 0.8552 - recall: 0.5899 - val_accuracy: 0.7449 - val_loss: 0.7829 - val_recall: 0.6246 - learning_rate: 1.0000e-07\n","Epoch 45/50\n","\n","Epoch 45: val_loss did not improve from 0.77916\n","299/299 - 434s - 1s/step - accuracy: 0.7227 - loss: 0.8521 - recall: 0.5933 - val_accuracy: 0.7441 - val_loss: 0.7797 - val_recall: 0.6271 - learning_rate: 1.0000e-07\n","Epoch 46/50\n","\n","Epoch 46: val_loss did not improve from 0.77916\n","299/299 - 414s - 1s/step - accuracy: 0.7200 - loss: 0.8541 - recall: 0.5878 - val_accuracy: 0.7449 - val_loss: 0.7805 - val_recall: 0.6250 - learning_rate: 1.0000e-07\n","Epoch 47/50\n","\n","Epoch 47: val_loss did not improve from 0.77916\n","299/299 - 410s - 1s/step - accuracy: 0.7226 - loss: 0.8534 - recall: 0.5910 - val_accuracy: 0.7432 - val_loss: 0.7828 - val_recall: 0.6242 - learning_rate: 1.0000e-07\n","Epoch 48/50\n","\n","Epoch 48: val_loss did not improve from 0.77916\n","299/299 - 424s - 1s/step - accuracy: 0.7199 - loss: 0.8502 - recall: 0.5834 - val_accuracy: 0.7416 - val_loss: 0.7809 - val_recall: 0.6284 - learning_rate: 1.0000e-07\n","Epoch 48: early stopping\n","Restoring model weights from the end of the best epoch: 38.\n"]}],"source":["history = model.fit(train_generator,\n","                    validation_data=valid_generator,\n","                    callbacks=[early_stopping,model_checkpoint, learn_control],\n","                    epochs=50,\n","                    verbose=2)"]},{"cell_type":"code","execution_count":10,"id":"1da6646f","metadata":{"execution":{"iopub.execute_input":"2024-06-10T04:27:41.773231Z","iopub.status.busy":"2024-06-10T04:27:41.772944Z","iopub.status.idle":"2024-06-10T04:27:42.255645Z","shell.execute_reply":"2024-06-10T04:27:42.254806Z"},"papermill":{"duration":0.507373,"end_time":"2024-06-10T04:27:42.257714","exception":false,"start_time":"2024-06-10T04:27:41.750341","status":"completed"},"tags":[]},"outputs":[{"data":{"text/plain":["<Axes: >"]},"execution_count":10,"metadata":{},"output_type":"execute_result"},{"data":{"image/png":"","text/plain":["<Figure size 640x480 with 1 Axes>"]},"metadata":{},"output_type":"display_data"},{"data":{"image/png":"","text/plain":["<Figure size 640x480 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["history_df = pd.DataFrame(history.history)\n","history_df[['loss', 'val_loss']].plot()\n","history_df[['accuracy','recall']].plot()"]},{"cell_type":"code","execution_count":11,"id":"d599654d","metadata":{"execution":{"iopub.execute_input":"2024-06-10T04:27:42.30474Z","iopub.status.busy":"2024-06-10T04:27:42.304442Z","iopub.status.idle":"2024-06-10T04:28:31.828156Z","shell.execute_reply":"2024-06-10T04:28:31.827211Z"},"papermill":{"duration":49.549389,"end_time":"2024-06-10T04:28:31.83014","exception":false,"start_time":"2024-06-10T04:27:42.280751","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["\u001b[1m29/29\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m46s\u001b[0m 2s/step - accuracy: 0.7556 - loss: 0.7948 - recall: 0.6232\n","Loss: 0.8230453729629517\n","Accuracy: 0.7413793206214905\n"]}],"source":["loss, accuracy,recall = model.evaluate(test_generator)\n","print(f\"Loss: {loss}\")\n","print(f\"Accuracy: {accuracy}\")"]}],"metadata":{"kaggle":{"accelerator":"gpu","dataSources":[{"datasetId":427555,"sourceId":813639,"sourceType":"datasetVersion"},{"datasetId":4776881,"sourceId":8091050,"sourceType":"datasetVersion"},{"datasetId":5064664,"sourceId":8489424,"sourceType":"datasetVersion"},{"isSourceIdPinned":true,"modelInstanceId":52667,"sourceId":63143,"sourceType":"modelInstanceVersion"}],"dockerImageVersionId":30699,"isGpuEnabled":true,"isInternetEnabled":true,"language":"python","sourceType":"notebook"},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.10.13"},"papermill":{"default_parameters":{},"duration":20970.124964,"end_time":"2024-06-10T04:28:35.628287","environment_variables":{},"exception":null,"input_path":"__notebook__.ipynb","output_path":"__notebook__.ipynb","parameters":{},"start_time":"2024-06-09T22:39:05.503323","version":"2.5.0"}},"nbformat":4,"nbformat_minor":5}